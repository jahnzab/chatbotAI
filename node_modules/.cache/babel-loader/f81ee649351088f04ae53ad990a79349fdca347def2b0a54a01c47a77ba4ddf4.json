{"ast":null,"code":"var _jsxFileName = \"/home/jahanzaib/Desktop/whisper__all/OLLAMAWHISPER_LLAMA3-PYTTSX3_GTTS/chat-app/Defcon-AI/src/Whisper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Whisper.css\"; // Import the CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Whisper() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [language, setLanguage] = useState(\"en\");\n  const [languages, setLanguages] = useState([]);\n  const [fileAudioUrl, setFileAudioUrl] = useState(null);\n\n  // Fetch supported languages\n  useEffect(() => {\n    const availableLanguages = [{\n      code: \"en\",\n      name: \"English\"\n    }, {\n      code: \"es\",\n      name: \"Spanish\"\n    }\n    // Add more languages as needed\n    ];\n    setLanguages(availableLanguages);\n  }, []);\n\n  // Handle Text Input\n  const handleTextChange = e => setText(e.target.value);\n\n  // Handle Language Change\n  const handleLanguageChange = e => setLanguage(e.target.value);\n\n  // Generate Audio from Text\n  const generateAudio = async () => {\n    try {\n      const response = await axios.post(\"http://localhost:8000/text-to-speech\", {\n        text\n      }, {\n        responseType: \"blob\",\n        params: {\n          language\n        }\n      });\n      const audioBlob = new Blob([response.data], {\n        type: \"audio/mpeg\"\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudioUrl(audioUrl);\n      new Audio(audioUrl).play(); // Play audio immediately\n    } catch (error) {\n      console.error(\"Error generating audio:\", error);\n    }\n  };\n\n  // Upload Audio File for Transcription\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    const audioUrl = URL.createObjectURL(file);\n    setFileAudioUrl(audioUrl);\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    axios.post(\"http://localhost:8000/transcribe-audio\", formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      },\n      params: {\n        language\n      }\n    }).then(response => setTranscription(response.data.transcription)).catch(error => alert(\"Error transcribing audio upload other file:\"));\n  };\n  //    function uploadFile(file) {\n  //     const formData = new FormData();\n  //     formData.append(\"audio_input\", file);\n\n  //     const response = await fetch(\"http://localhost:8000/transcribe-audio\", {\n  //         method: \"POST\",\n  //         body: formData,\n  //     });\n\n  //     const data = await response.json();\n\n  //     if (data.error) {\n  //         alert(\"Invalid file! Please upload a valid MP3/WAV file.\");\n  //     } else {\n  //         console.log(\"Transcription:\", data.transcription);\n  //     }\n  // }\n\n  // Function to download transcription as a .txt file\n  const downloadTranscription = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([transcription], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcription.txt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"heading\",\n        children: \"Speech-to-Text and Text-to-Speech\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Text-to-Speech\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Enter text to generate speech\",\n          value: text,\n          onChange: handleTextChange,\n          className: \"textarea\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: language,\n          onChange: handleLanguageChange,\n          className: \"select\",\n          children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: lang.code,\n            children: lang.name\n          }, lang.code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: generateAudio,\n          className: \"btn\",\n          children: \"Generate Speech\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: audioUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upload Audio for Transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"audio/mp3,audio/wav\",\n          onChange: handleFileUpload,\n          className: \"file-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), fileAudioUrl && /*#__PURE__*/_jsxDEV(\"audio\", {\n          controls: true,\n          src: fileAudioUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 28\n        }, this), transcription && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transcription\",\n          children: transcription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }, this), transcription && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: downloadTranscription,\n          className: \"btn\",\n          children: \"Download Transcription\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(Whisper, \"W4/UA2HetelhqwNIjsmmUDXckRM=\");\n_c = Whisper;\nexport default Whisper;\nvar _c;\n$RefreshReg$(_c, \"Whisper\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Whisper","_s","text","setText","audioUrl","setAudioUrl","transcription","setTranscription","language","setLanguage","languages","setLanguages","fileAudioUrl","setFileAudioUrl","availableLanguages","code","name","handleTextChange","e","target","value","handleLanguageChange","generateAudio","response","post","responseType","params","audioBlob","Blob","data","type","URL","createObjectURL","Audio","play","error","console","handleFileUpload","event","file","files","formData","FormData","append","headers","then","catch","alert","downloadTranscription","element","document","createElement","href","download","body","appendChild","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","map","lang","onClick","controls","src","accept","_c","$RefreshReg$"],"sources":["/home/jahanzaib/Desktop/whisper__all/OLLAMAWHISPER_LLAMA3-PYTTSX3_GTTS/chat-app/Defcon-AI/src/Whisper.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./Whisper.css\";  // Import the CSS file for styling\n\nfunction Whisper() {\n  const [text, setText] = useState(\"\");\n  const [audioUrl, setAudioUrl] = useState(null);\n  const [transcription, setTranscription] = useState(\"\");\n  const [language, setLanguage] = useState(\"en\");\n  const [languages, setLanguages] = useState([]);\n  const [fileAudioUrl, setFileAudioUrl] = useState(null);\n\n  // Fetch supported languages\n  useEffect(() => {\n    const availableLanguages = [\n      { code: \"en\", name: \"English\" },\n      { code: \"es\", name: \"Spanish\" },\n      // Add more languages as needed\n    ];\n    setLanguages(availableLanguages);\n  }, []);\n\n  // Handle Text Input\n  const handleTextChange = (e) => setText(e.target.value);\n\n  // Handle Language Change\n  const handleLanguageChange = (e) => setLanguage(e.target.value);\n\n  // Generate Audio from Text\n  const generateAudio = async () => {\n    try {\n      const response = await axios.post(\n        \"http://localhost:8000/text-to-speech\",\n        { text },\n        { responseType: \"blob\", params: { language } }\n      );\n      const audioBlob = new Blob([response.data], { type: \"audio/mpeg\" });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      setAudioUrl(audioUrl);\n      new Audio(audioUrl).play(); // Play audio immediately\n    } catch (error) {\n      console.error(\"Error generating audio:\", error);\n    }\n  };\n\n  // Upload Audio File for Transcription\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    const audioUrl = URL.createObjectURL(file);\n    setFileAudioUrl(audioUrl);\n\n    const formData = new FormData();\n    formData.append(\"file\", file);\n\n    axios\n      .post(\"http://localhost:8000/transcribe-audio\", formData, {\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n        params: { language },\n      })\n      .then((response) => setTranscription(response.data.transcription))\n      .catch((error) => alert(\"Error transcribing audio upload other file:\", ));\n  };\n//    function uploadFile(file) {\n//     const formData = new FormData();\n//     formData.append(\"audio_input\", file);\n\n//     const response = await fetch(\"http://localhost:8000/transcribe-audio\", {\n//         method: \"POST\",\n//         body: formData,\n//     });\n\n//     const data = await response.json();\n    \n//     if (data.error) {\n//         alert(\"Invalid file! Please upload a valid MP3/WAV file.\");\n//     } else {\n//         console.log(\"Transcription:\", data.transcription);\n//     }\n// }\n\n  // Function to download transcription as a .txt file\n  const downloadTranscription = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([transcription], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"transcription.txt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"content-container\">\n        <h1 className=\"heading\">Speech-to-Text and Text-to-Speech</h1>\n\n        <div className=\"card\">\n          <h2>Text-to-Speech</h2>\n          <textarea\n            placeholder=\"Enter text to generate speech\"\n            value={text}\n            onChange={handleTextChange}\n            className=\"textarea\"\n          />\n          <select value={language} onChange={handleLanguageChange} className=\"select\">\n            {languages.map((lang) => (\n              <option key={lang.code} value={lang.code}>\n                {lang.name}\n              </option>\n            ))}\n          </select>\n          <button onClick={generateAudio} className=\"btn\">\n            Generate Speech\n          </button>\n          {audioUrl && <audio controls src={audioUrl}></audio>}\n        </div>\n\n        <div className=\"card\">\n          <h2>Upload Audio for Transcription</h2>\n          <input\n            type=\"file\"\n            accept=\"audio/mp3,audio/wav\"\n            onChange={handleFileUpload}\n            className=\"file-input\"\n          />\n          {fileAudioUrl && <audio controls src={fileAudioUrl}></audio>}\n          {transcription && <div className=\"transcription\">{transcription}</div>}\n          {transcription && (\n            <button onClick={downloadTranscription} className=\"btn\">\n              Download Transcription\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Whisper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}