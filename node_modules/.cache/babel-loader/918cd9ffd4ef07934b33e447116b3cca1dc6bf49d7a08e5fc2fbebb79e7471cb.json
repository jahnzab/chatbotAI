{"ast":null,"code":"// import React, { useState } from \"react\";\n// // import Whisper from \"./Whisper\";\n// import Llamabot from \"./Llamabot\";\n// // import ImageCaptioning from \"./ImageCaptioning\";\n// // import Generateimage from \"./Generateimage\";\n// import \"./App.css\";\n// function App() {\n//   const [selectedIntent, setSelectedIntent] = useState(null);\n//   const handleIntentChange = (intent) => {\n//     setSelectedIntent(intent);\n//   };\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"title\">CHOOSE DEFCON AI INTENTS</h1>\n//       <div className=\"button-container\">\n//         <button \n//           onClick={() => handleIntentChange('llama')} \n//           className=\"custom-button llama\"\n//         >\n//           Use Llama (Chatbot)\n//         </button>\n//       </div>\n//       {selectedIntent === 'llama' && <Llamabot />} \n//     </div>\n//   );\n// }\n// export default App;\nimport React,{useState,useEffect}from\"react\";import Llamabot from\"./Llamabot\";// You can import other components like Whisper, ImageCaptioning, etc.\n// import Whisper from \"./Whisper\";\n// import ImageCaptioning from \"./ImageCaptioning\";\nimport\"./App.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[selectedIntent,setSelectedIntent]=useState(null);const[response,setResponse]=useState(null);const[loading,setLoading]=useState(false);const[question,setQuestion]=useState(\"\");const handleIntentChange=intent=>{setSelectedIntent(intent);setResponse(null);// Reset previous response when changing intent\n};// Handling API calls to your FastAPI backend (example for llama intent)\nconst handleAskQuestion=async()=>{setLoading(true);try{const res=await fetch(\"/.netlify/functions/chat/generate/\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({question})});const data=await res.json();setResponse(data.answer);}catch(error){console.error(\"Error fetching response:\",error);setResponse(\"An error occurred. Please try again.\");}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"CHOOSE DEFCON AI INTENTS\"}),/*#__PURE__*/_jsx(\"div\",{className:\"button-container\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleIntentChange(\"llama\"),className:\"custom-button llama\",children:\"Use Llama (Chatbot)\"})}),selectedIntent===\"llama\"&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Ask the Llama Bot\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:question,onChange:e=>setQuestion(e.target.value),placeholder:\"Ask a question...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleAskQuestion,disabled:loading,children:loading?\"Thinking...\":\"Ask\"}),response&&/*#__PURE__*/_jsx(\"p\",{className:\"response\",children:response})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","Llamabot","jsx","_jsx","jsxs","_jsxs","App","selectedIntent","setSelectedIntent","response","setResponse","loading","setLoading","question","setQuestion","handleIntentChange","intent","handleAskQuestion","res","fetch","method","headers","body","JSON","stringify","data","json","answer","error","console","className","children","onClick","type","value","onChange","e","target","placeholder","disabled"],"sources":["/home/jahanzaib/Desktop/chatgit/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// // import Whisper from \"./Whisper\";\n// import Llamabot from \"./Llamabot\";\n// // import ImageCaptioning from \"./ImageCaptioning\";\n// // import Generateimage from \"./Generateimage\";\n// import \"./App.css\";\n\n// function App() {\n//   const [selectedIntent, setSelectedIntent] = useState(null);\n\n//   const handleIntentChange = (intent) => {\n//     setSelectedIntent(intent);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"title\">CHOOSE DEFCON AI INTENTS</h1>\n      \n//       <div className=\"button-container\">\n       \n//         <button \n//           onClick={() => handleIntentChange('llama')} \n//           className=\"custom-button llama\"\n//         >\n//           Use Llama (Chatbot)\n//         </button>\n//       </div>\n//       {selectedIntent === 'llama' && <Llamabot />} \n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport Llamabot from \"./Llamabot\";\n// You can import other components like Whisper, ImageCaptioning, etc.\n// import Whisper from \"./Whisper\";\n// import ImageCaptioning from \"./ImageCaptioning\";\nimport \"./App.css\";\n\nfunction App() {\n  const [selectedIntent, setSelectedIntent] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [question, setQuestion] = useState(\"\");\n\n  const handleIntentChange = (intent) => {\n    setSelectedIntent(intent);\n    setResponse(null); // Reset previous response when changing intent\n  };\n\n  // Handling API calls to your FastAPI backend (example for llama intent)\n  const handleAskQuestion = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/.netlify/functions/chat/generate/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ question }),\n      });\n      const data = await res.json();\n      setResponse(data.answer);\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      setResponse(\"An error occurred. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"title\">CHOOSE DEFCON AI INTENTS</h1>\n\n      <div className=\"button-container\">\n        {/* Button for Llama Intent */}\n        <button\n          onClick={() => handleIntentChange(\"llama\")}\n          className=\"custom-button llama\"\n        >\n          Use Llama (Chatbot)\n        </button>\n\n        {/* Button for Whisper Intent (future integration) */}\n        {/* <button\n          onClick={() => handleIntentChange(\"whisper\")}\n          className=\"custom-button whisper\"\n        >\n          Whisper (Speech-to-Text)\n        </button> */}\n\n        {/* Button for Image Captioning Intent (future integration) */}\n        {/* <button\n          onClick={() => handleIntentChange(\"image-captioning\")}\n          className=\"custom-button image-captioning\"\n        >\n          Image Captioning\n        </button> */}\n      </div>\n\n      {/* Render Llama Bot if 'llama' intent is selected */}\n      {selectedIntent === \"llama\" && (\n        <div>\n          <h2>Ask the Llama Bot</h2>\n          <input\n            type=\"text\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            placeholder=\"Ask a question...\"\n          />\n          <button onClick={handleAskQuestion} disabled={loading}>\n            {loading ? \"Thinking...\" : \"Ask\"}\n          </button>\n\n          {response && <p className=\"response\">{response}</p>}\n        </div>\n      )}\n\n      {/* You can add conditional rendering for other intents like Whisper, etc. */}\n      {/* {selectedIntent === \"whisper\" && <Whisper />} */}\n      {/* {selectedIntent === \"image-captioning\" && <ImageCaptioning />} */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}