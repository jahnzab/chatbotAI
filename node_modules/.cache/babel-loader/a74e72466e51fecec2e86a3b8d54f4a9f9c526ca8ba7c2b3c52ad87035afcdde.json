{"ast":null,"code":"var _jsxFileName = \"/home/jahanzaib/Desktop/chatgit/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// // import Whisper from \"./Whisper\";\n// import Llamabot from \"./Llamabot\";\n// // import ImageCaptioning from \"./ImageCaptioning\";\n// // import Generateimage from \"./Generateimage\";\n// import \"./App.css\";\n\n// function App() {\n//   const [selectedIntent, setSelectedIntent] = useState(null);\n\n//   const handleIntentChange = (intent) => {\n//     setSelectedIntent(intent);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"title\">CHOOSE DEFCON AI INTENTS</h1>\n\n//       <div className=\"button-container\">\n\n//         <button \n//           onClick={() => handleIntentChange('llama')} \n//           className=\"custom-button llama\"\n//         >\n//           Use Llama (Chatbot)\n//         </button>\n//       </div>\n//       {selectedIntent === 'llama' && <Llamabot />} \n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\";\nimport Llamabot from \"./Llamabot\"; // Correct usage of Llamabot import\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedIntent, setSelectedIntent] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [question, setQuestion] = useState(\"\");\n  const handleIntentChange = intent => {\n    setSelectedIntent(intent);\n    setResponse(null); // Reset previous response when changing intent\n  };\n\n  // Handling API calls to your FastAPI backend (example for llama intent)\n  const handleAskQuestion = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/.netlify/functions/chat/generate/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          question\n        })\n      });\n      const data = await res.json();\n      setResponse(data.answer);\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      setResponse(\"An error occurred. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"CHOOSE DEFCON AI INTENTS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleIntentChange(\"llama\"),\n        className: \"custom-button llama\",\n        children: \"Use Chatbot (Try)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), selectedIntent === \"llama\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ask the Llama Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: question,\n        onChange: e => setQuestion(e.target.value),\n        placeholder: \"Ask a question...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAskQuestion,\n        disabled: loading,\n        children: loading ? \"Thinking...\" : \"Ask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"response\",\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), selectedIntent === \"llama\" && /*#__PURE__*/_jsxDEV(Llamabot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 38\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"24YziH4kWqH1VtCSUI8ykpZkXqM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Llamabot","jsxDEV","_jsxDEV","App","_s","selectedIntent","setSelectedIntent","response","setResponse","loading","setLoading","question","setQuestion","handleIntentChange","intent","handleAskQuestion","res","fetch","method","headers","body","JSON","stringify","data","json","answer","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/home/jahanzaib/Desktop/chatgit/src/App.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// // import Whisper from \"./Whisper\";\n// import Llamabot from \"./Llamabot\";\n// // import ImageCaptioning from \"./ImageCaptioning\";\n// // import Generateimage from \"./Generateimage\";\n// import \"./App.css\";\n\n// function App() {\n//   const [selectedIntent, setSelectedIntent] = useState(null);\n\n//   const handleIntentChange = (intent) => {\n//     setSelectedIntent(intent);\n//   };\n\n//   return (\n//     <div className=\"app-container\">\n//       <h1 className=\"title\">CHOOSE DEFCON AI INTENTS</h1>\n      \n//       <div className=\"button-container\">\n       \n//         <button \n//           onClick={() => handleIntentChange('llama')} \n//           className=\"custom-button llama\"\n//         >\n//           Use Llama (Chatbot)\n//         </button>\n//       </div>\n//       {selectedIntent === 'llama' && <Llamabot />} \n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from \"react\"; \nimport Llamabot from \"./Llamabot\"; // Correct usage of Llamabot import\nimport \"./App.css\";\n\nfunction App() {\n  const [selectedIntent, setSelectedIntent] = useState(null);\n  const [response, setResponse] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [question, setQuestion] = useState(\"\");\n\n  const handleIntentChange = (intent) => {\n    setSelectedIntent(intent);\n    setResponse(null); // Reset previous response when changing intent\n  };\n\n  // Handling API calls to your FastAPI backend (example for llama intent)\n  const handleAskQuestion = async () => {\n    setLoading(true);\n    try {\n      const res = await fetch(\"/.netlify/functions/chat/generate/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ question }),\n      });\n      const data = await res.json();\n      setResponse(data.answer);\n    } catch (error) {\n      console.error(\"Error fetching response:\", error);\n      setResponse(\"An error occurred. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <h1 className=\"title\">CHOOSE DEFCON AI INTENTS</h1>\n\n      <div className=\"button-container\">\n        {/* Button for Llama Intent */}\n        <button\n          onClick={() => handleIntentChange(\"llama\")}\n          className=\"custom-button llama\"\n        >\n          Use Chatbot (Try)\n        </button>\n      </div>\n\n      {/* Render Llama Bot if 'llama' intent is selected */}\n      {selectedIntent === \"llama\" && (\n        <div>\n          <h2>Ask the Llama Bot</h2>\n          <input\n            type=\"text\"\n            value={question}\n            onChange={(e) => setQuestion(e.target.value)}\n            placeholder=\"Ask a question...\"\n          />\n          <button onClick={handleAskQuestion} disabled={loading}>\n            {loading ? \"Thinking...\" : \"Ask\"}\n          </button>\n\n          {response && <p className=\"response\">{response}</p>}\n        </div>\n      )}\n      \n      {/* Make sure Llamabot is used conditionally when selectedIntent is \"llama\" */}\n      {selectedIntent === \"llama\" && <Llamabot />}\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}